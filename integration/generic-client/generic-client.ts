// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// source: generic-client.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";
import { Observable } from "rxjs";
import { MessageType, messageTypeRegistry } from "./typeRegistry";

export const protobufPackage = "basic";

export interface GetBasicRequest {
  $type: "basic.GetBasicRequest";
  name: string;
}

export interface GetBasicResponse {
  $type: "basic.GetBasicResponse";
  resp: string;
}

function createBaseGetBasicRequest(): GetBasicRequest {
  return { $type: "basic.GetBasicRequest", name: "" };
}

export const GetBasicRequest = {
  $type: "basic.GetBasicRequest" as const,

  encode(message: GetBasicRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetBasicRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBasicRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetBasicRequest {
    return { $type: GetBasicRequest.$type, name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetBasicRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetBasicRequest>, I>>(base?: I): GetBasicRequest {
    return GetBasicRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetBasicRequest>, I>>(object: I): GetBasicRequest {
    const message = createBaseGetBasicRequest();
    message.name = object.name ?? "";
    return message;
  },
};

messageTypeRegistry.set(GetBasicRequest.$type, GetBasicRequest);

function createBaseGetBasicResponse(): GetBasicResponse {
  return { $type: "basic.GetBasicResponse", resp: "" };
}

export const GetBasicResponse = {
  $type: "basic.GetBasicResponse" as const,

  encode(message: GetBasicResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.resp !== "") {
      writer.uint32(10).string(message.resp);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetBasicResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBasicResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resp = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetBasicResponse {
    return { $type: GetBasicResponse.$type, resp: isSet(object.resp) ? globalThis.String(object.resp) : "" };
  },

  toJSON(message: GetBasicResponse): unknown {
    const obj: any = {};
    if (message.resp !== "") {
      obj.resp = message.resp;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetBasicResponse>, I>>(base?: I): GetBasicResponse {
    return GetBasicResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetBasicResponse>, I>>(object: I): GetBasicResponse {
    const message = createBaseGetBasicResponse();
    message.resp = object.resp ?? "";
    return message;
  },
};

messageTypeRegistry.set(GetBasicResponse.$type, GetBasicResponse);

export interface BasicService {
  Unary(request: GetBasicRequest): Promise<GetBasicResponse>;
  ServerStreaming(request: GetBasicRequest): Observable<GetBasicResponse>;
  ClientStreaming(request: Observable<GetBasicRequest>): Promise<GetBasicResponse>;
  BidiStreaming(request: Observable<GetBasicRequest>): Observable<GetBasicResponse>;
}

export const BasicServiceServiceName = "basic.BasicService";
export class BasicServiceClientImpl implements BasicService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || BasicServiceServiceName;
    this.rpc = rpc;
    this.Unary = this.Unary.bind(this);
    this.ServerStreaming = this.ServerStreaming.bind(this);
    this.ClientStreaming = this.ClientStreaming.bind(this);
    this.BidiStreaming = this.BidiStreaming.bind(this);
  }
  Unary(request: GetBasicRequest): Promise<GetBasicResponse> {
    return this.rpc.request(this.service, "Unary", request, GetBasicRequest, GetBasicResponse);
  }

  ServerStreaming(request: GetBasicRequest): Observable<GetBasicResponse> {
    return this.rpc.serverStreamingRequest(this.service, "ServerStreaming", request, GetBasicRequest, GetBasicResponse);
  }

  ClientStreaming(request: Observable<GetBasicRequest>): Promise<GetBasicResponse> {
    return this.rpc.clientStreamingRequest(this.service, "ClientStreaming", request, GetBasicRequest, GetBasicResponse);
  }

  BidiStreaming(request: Observable<GetBasicRequest>): Observable<GetBasicResponse> {
    return this.rpc.bidirectionalStreamingRequest(
      this.service,
      "BidiStreaming",
      request,
      GetBasicRequest,
      GetBasicResponse,
    );
  }
}

interface Rpc {
  request<Req, Res>(
    service: string,
    method: string,
    request: Req,
    reqType: MessageType,
    respType: MessageType,
  ): Promise<Res>;
  clientStreamingRequest<Req, Res>(
    service: string,
    method: string,
    request: Observable<Req>,
    reqType: MessageType,
    respType: MessageType,
  ): Promise<Res>;
  serverStreamingRequest<Req, Res>(
    service: string,
    method: string,
    request: Req,
    reqType: MessageType,
    respType: MessageType,
  ): Observable<Res>;
  bidirectionalStreamingRequest<Req, Res>(
    service: string,
    method: string,
    request: Observable<Req>,
    reqType: MessageType,
    respType: MessageType,
  ): Observable<Res>;
}

export interface Codec<T> {
  encode(message: T, writer: _m0.Writer): _m0.Writer;
  decode(input: Uint8Array | _m0.Reader, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  fromPartial(object: DeepPartial<T>): T;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
